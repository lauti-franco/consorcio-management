// prisma/schema.prisma - CORREGIDO
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  passwordHash    String
  role            UserRole
  phone           String?
  avatar          String?
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relaciones de SaaS
  subscription    Subscription?
  ownedBuildings  Building[]  @relation("BuildingOwner")
  managedUnits    Unit[]      @relation("UnitManager")
  
  // Relaciones existentes (mejoradas) - CORREGIDAS
  expenses        Expense[]    @relation("ExpenseUser")
  payments        Payment[]
  tickets         Ticket[]     @relation("TicketReporter")
  assignedTickets Ticket[]     @relation("TicketAssignee")
  assignedTasks   Task[]       @relation("TaskAssignee")
  createdTasks    Task[]       @relation("TaskCreator")
  refreshTokens   RefreshToken[]
  files           File[]

  @@map("users")
}

model Subscription {
  id                    String   @id @default(uuid())
  plan                  PlanType @default(STARTER)
  status                SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId  String?
  stripeCustomerId      String?
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  cancelAtPeriodEnd     Boolean  @default(false)
  
  // Límites del plan
  maxBuildings          Int      @default(1)
  maxUsers              Int      @default(10)
  features              Json     @default("{}")
  
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("subscriptions")
}

model Unit {
  id          String   @id @default(uuid())
  number      String
  floor       Int
  type        UnitType @default(APARTMENT)
  area        Float
  bedrooms    Int?
  bathrooms   Int?
  isOccupied  Boolean  @default(false)
  features    String[]

  buildingId  String
  building    Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  
  // Relaciones mejoradas
  managerId   String?
  manager     User?    @relation("UnitManager", fields: [managerId], references: [id])
  expenses    Expense[]
  payments    Payment[]
  tickets     Ticket[]  @relation("TicketUnit") // RELACIÓN AÑADIDA

  @@unique([buildingId, number])
  @@map("units")
}

model Building {
  id        String   @id @default(uuid())
  name      String
  address   String
  city      String
  settings  Json     @default("{}")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones mejoradas
  ownerId   String
  owner     User     @relation("BuildingOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  units     Unit[]
  expenses  Expense[]
  tickets   Ticket[]
  tasks     Task[]    @relation("TaskBuilding") // RELACIÓN AÑADIDA

  @@map("buildings")
}

model Expense {
  id          String        @id @default(uuid())
  concept     String
  amount      Float
  dueDate     DateTime
  period      String?
  type        ExpenseType   @default(ORDINARY)
  status      ExpenseStatus @default(OPEN)
  
  buildingId  String
  building    Building      @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  
  // Relaciones mejoradas - CORREGIDAS
  unitId      String?
  unit        Unit?         @relation(fields: [unitId], references: [id])
  userId      String?
  user        User?         @relation("ExpenseUser", fields: [userId], references: [id]) // RELACIÓN AÑADIDA
  payments    Payment[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("expenses")
}

model Payment {
  id          String        @id @default(uuid())
  amount      Float
  date        DateTime      @default(now())
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  receiptUrl  String?
  
  expenseId   String
  expense     Expense       @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  
  unitId      String
  unit        Unit          @relation(fields: [unitId], references: [id])

  @@map("payments")
}

model Ticket {
  id           String       @id @default(uuid())
  title        String
  description  String
  priority     Priority     @default(MEDIUM)
  status       TicketStatus @default(OPEN)
  category     String
  
  userId       String
  user         User         @relation("TicketReporter", fields: [userId], references: [id])
  
  assignedToId String?
  assignedTo   User?        @relation("TicketAssignee", fields: [assignedToId], references: [id])
  
  buildingId   String
  building     Building     @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  
  unitId       String?
  unit         Unit?        @relation("TicketUnit", fields: [unitId], references: [id]) // RELACIÓN CORREGIDA
  
  photos       String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("tickets")
}

model Task {
  id           String     @id @default(uuid())
  title        String
  description  String
  priority     Priority   @default(MEDIUM)
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  
  assignedToId String
  assignedTo   User       @relation("TaskAssignee", fields: [assignedToId], references: [id])
  
  createdById  String
  createdBy    User       @relation("TaskCreator", fields: [createdById], references: [id])
  
  buildingId   String
  building     Building   @relation("TaskBuilding", fields: [buildingId], references: [id], onDelete: Cascade) // RELACIÓN CORREGIDA
  
  photos       String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("tasks")
}

model File {
  id         String   @id @default(uuid())
  key        String   @unique
  url        String
  mimeType   String
  size       Int
  uploadedBy String
  user       User     @relation(fields: [uploadedBy], references: [id])
  createdAt  DateTime @default(now())

  @@map("files")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokenHash String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("refresh_tokens")
}

// ENUMS (sin cambios)
enum UserRole {
  SUPER_ADMIN
  ADMIN
  MAINTENANCE
  RESIDENT
}

enum PlanType {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
  PAST_DUE
}

enum UnitType {
  APARTMENT
  OFFICE
  COMMERCIAL
  STORAGE
}

enum ExpenseType {
  ORDINARY
  EXTRAORDINARY
  FUND
  SPECIAL
}

enum ExpenseStatus {
  DRAFT
  OPEN
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  TRANSFER
  CARD
  MERCADOPAGO
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}